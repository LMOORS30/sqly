#[allow(unused_imports)]
use super::*;

mod delete;
mod insert;
mod select;
mod update;

pub use delete::*;
pub use insert::*;
pub use select::*;
pub use update::*;



/// A type which represents a database table.
/// 
/// Related to [`Check`](Check) and [`Flat`](Flat).
/// 
/// These traits are not meant to be manually implemented,
/// see [`#[derive(Table)]`](derive@Table) instead.
/// 
/// This trait serves as an alias to the implementation of other traits
/// ([`Delete`](Delete), [`Insert`](Insert), [`Select`](Select), [`Update`](Update))
/// where `<Table = Self>`.
pub trait Table {
    /// The sqlx database type for which queries are built.
    /// 
    /// This will be equal to the type defined by the features enabled for this crate (see [Features](https://github.com/LMOORS30/sqly#features)).
    type DB: sqlx::Database;

    /// Returns a table record built from a row returned by the database.
    /// 
    /// This function is not meant to be manualy implemented,
    /// see [`#[derive(Table)]`](derive@Table) instead.
    fn from_row(row: <Self::DB as sqlx::Database>::Row) -> sqlx::Result<Self>
    where Self: Sized;

    /// Returns a query which deletes rows from the table according to the definition of the given type.
    /// 
    /// This function is not meant to be implemented and instead delegates to [`Delete::delete`](Delete::delete).
    fn delete<R>(row: &R) -> R::Query<'_>
    where R: Delete<Table = Self> {
        row.delete()
    }

    /// Returns a query which inserts rows into the table according to the definition of the given type.
    /// 
    /// This function is not meant to be implemented and instead delegates to [`Insert::insert`](Insert::insert).
    fn insert<R>(row: &R) -> R::Query<'_>
    where R: Insert<Table = Self> {
        row.insert()
    }

    /// Returns a query which selects rows from the table according to the definition of the given type.
    /// 
    /// This function is not meant to be implemented and instead delegates to [`Select::select`](Select::select).
    fn select<R>(row: &R) -> R::Query<'_>
    where R: Select<Table = Self> {
        row.select()
    }

    /// Returns a query which updates rows in the table according to the definition of the given type.
    /// 
    /// This function is not meant to be implemented and instead delegates to [`Update::update`](Update::update).
    fn update<R>(row: &R) -> R::Query<'_>
    where R: Update<Table = Self> {
        row.update()
    }

}



/// A [`Table`](Table) which has its columns checked at compile time.
/// 
/// This will be generated unless
/// [`#[sqly(unchecked)]`](docs::attr#dev-attributes) is specified or
/// the default [`checked`](https://github.com/LMOORS30/sqly#features) feature is disabled.
/// 
/// This trait serves no further purpose.
pub trait Check {
    /// Calls the [`sqlx::query_as!`] macro to perform the compile time check.
    /// 
    /// The result is not returned, this function is not meant to be called.
    fn check(&self);
}



/// A table with a flattened representation.
/// 
/// This will be generated by [`#[sqly(flat)]`](docs::attr#flat) if specified.
/// 
/// Implements the [`sqlx::FromRow`] and `From<Self::Flat>` traits
/// to convert from a database row and into the nested structure.
pub trait Flat: Table + From<Self::Flat> {
    /// The flattened representation of this table.
    /// 
    /// The fields of this type match the SQL `SELECT` list of generated queries.
    type Flat: for <'r> sqlx::FromRow<'r, <<Self as Table>::DB as sqlx::Database>::Row>;
}
