#[allow(unused_imports)]
use super::*;



/// A type which can update rows in a table.
/// 
/// Related to [`UpdateCheck`](UpdateCheck) and [`UpdateImpl`](UpdateImpl).
/// 
/// These traits are not meant to be manually implemented,
/// see [`#[derive(Update)]`](derive@Update)
/// or [`#[sqly(update)]`](docs::attr#update)
/// instead.
pub trait Update {
    /// The type representing the table which this query will operate on.
    /// 
    /// When generated with [`#[derive(Update)]`](derive@Update) this type is set by the [`#[sqly(table)]`](docs::attr#table) attribute.
    /// 
    /// When generated with [`#[sqly(update)]`](docs::attr#update) this type is set to the struct for which [`#[derive(Table)]`](derive@Table) was called.
    /// 
    /// When this type implements the [`Table`](Table) trait the [`Table::update`](`Table::update`) alias is made available, this type serves no other purpose.
    type Table;

    /// The query type for the operation to be executed.
    /// 
    /// This will be equal to [`sqlx::query::Query`], with the `DB` type defined by the features enabled for this crate (see [Features](https://github.com/LMOORS30/sqly#features)).
    type Query<'a>
        where Self: 'a;

    /// Returns a query which updates rows in the table according to the definition of this type.
    /// 
    /// This function is not meant to be manualy implemented,
    /// see [`#[derive(Update)]`](derive@Update)
    /// or [`#[sqly(update)]`](docs::attr#update)
    /// instead.
    fn update(&self) -> Self::Query<'_>;
}



/// A type which has its [`Update`](Update) query checked at compile time.
/// 
/// This will be generated unless
/// [`#[sqly(unchecked)]`](docs::attr#dev-attributes) is specified or
/// the default [`checked`](https://github.com/LMOORS30/sqly#features) feature is disabled.
/// 
/// This trait serves no further purpose.
pub trait UpdateCheck {
    /// Calls the [`sqlx::query!`] macro to perform the compile time check.
    /// 
    /// The result is not returned, this function is not meant to be called.
    fn update_check(&self);
}



/// A type which can update rows in a table.
/// 
/// This is the implementation generated by the macro derive.
/// 
/// An implementation for [`Update`](Update) will be generated as
/// `Self::`[`update_from`](UpdateImpl::update_from)`(self.`[`update_sql`](UpdateImpl::update_sql)`())`.
pub trait UpdateImpl {
    /// See [`Update::Table`](Update::Table).
    type Table;

    /// See [`Update::Query`](Update::Query).
    type Query<'q, 'a>;

    /// The type from which the [`Update::Query`](UpdateImpl::Query) is built.
    /// 
    /// This will be either `&'q str` or `(&'q str, Result<`[`sqlx::Arguments`]`<'a>>)`.
    type From<'q, 'a>;

    /// The type generated by the macro derive.
    /// 
    /// This will be either `&'static str` or `(&'static str, Result<`[`sqlx::Arguments`]`<'a>>)`.
    type Sql<'a>
        where Self: 'a;

    /// Returns the [`Self::Sql`](UpdateImpl::Sql) value generated by the macro derive.
    /// 
    /// Allows direct access to the SQL for further manipulation of the generated query.
    fn update_sql(&self) -> Self::Sql<'_>;

    /// Returns the [`Update::Query`](UpdateImpl::Query) value built from the given SQL value.
    /// 
    /// Assumes [`Self::From`](UpdateImpl::From) is based on the generated [`Self::Sql`](UpdateImpl::Sql).
    fn update_from<'q, 'a>(query: Self::From<'q, 'a>) -> Self::Query<'q, 'a>;
}
